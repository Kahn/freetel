documentation.txt
Created by David Rowe May 2008
Wispcar project

Files
-----

wispcar.asm........: PIC source code, compile and simulate 
                     with Windows MPLAB 8.10 (free download)
                     Also explains Wispcar commands
wispcar.sch........: gEDA gschem schematic
Makefile...........: Creates PDF of schematic
documentation.txt..: This file

Project Plan
------------

[ ] WP100 Documentation
    [ ] Create SVN repository
    [ ] Draw schematic
    [ ] Write Test Report
        + Discuss tests performed
        + how to repeat them
        + results
    [ ] Software
    [ ] Write Design Notes
        + explain various sections of design
        + discuss trade offs

[ ] WP200 Prototype Development
    [ ] Breadboard Prototype
        [X] PIC with RS232
        [X] Current sensor
            + high-side op-amp differential amp
        [X] Power Switch
            + used to switch power to AP
            + controlled by watchdog and sleep function
        [ ] Linear Regulator
        [X] Watchdog software
	[X] Sleep software
    [ ] Construct Soldered Prototype
    [ ] Install in Solar powered AP (Rowetel)
    
[ ] WP300 Testing
    [ ] Test 1: false watchdog firing
	+ test_watchdog.tcl Exepct script
	+ sends 'w' every sec, look for false WD fire
	+ results: after approx 40 hrs, 91,000 seconds, no false firing
        
    [ ] Test to determine watchdog doesn't fire by mistake
        + leave running for 1 week
        + stable power & router
        + ensure watchdog doesn't fire by mistake        
    [ ] Dirty power test
        + work out a way to simulate a poor power supply
        + for example put power supply in series with transformer
          secondary, then modulate primary with pulses        
        + this will give big spikes on power line
        + make sure PIC never hangs       
    [ ] Brown out test
        + vary Vbat from 30V down to 2V 10 times
        + make sure PIC does not hang
        
Specs:
-----

1/ Measures Vbat and Ibat.

   Vbat between 5 and 60V
   Ibat between 0 and 5A

  Measures Vbat and Ibat and reports every 1 sec to Host.

2/ Watchdog

   Fires if no RS232 rx for TBD1 secs from host
   Power is shut off for 5 seconds then reapplied
   
3/ Sleep

   Send "sleepXXXX" to put power supply to sleep for XXXX seconds

4/ Current consumption (estimated)

   Vbat = 30V I=2mA
   Vbat = 5V  I=2mA

   Note: we need to work out a way to get 60V operation, 78L05
   regulator can't go above 35V.

References
----------

1/ Zener power supply design:

   http://www.kpsec.freeuk.com/powersup.htm

2/ PIC10F510 datasheet from Microchip

3/ 78L05 datasheet 

4/ IRF9540 datasheet

Credits
-------

Tim Ansell (Mithro) for lending me his PIC collection and programmer
Yahel Ben-David

Notes
-----

1/ IRF9640 FET was selected largely at random.  At 19A max it may be
overkill, a cheaper FET may be more suitable.

2/ The RS232 polarity may need to change when directly connected to a
router without level conversion, see reference docs for RS232 software
UART code in wispcar.asm.  I used a MAX232 type chip for interfacing
the RS232 tx & rx to a PC's serial port for testing.

Gotchas
-------

1/ On the PIC12F510 we can only use 'call' to call an address in the
first 256 bytes, so put all funcs at the start of the program, main at
the end.

2/ If the RS232 characters have occasional errors, the internal clock
oscillator may need tweaking.  You can check the baud rate of the
RS232 signals using an oscilloscope, at 4800 baud the bit period
should be 208us.  See PIC data sheet for information on adjusting the
internal oscillator.

3/ The Vce(max) rating of Q2 is 35V, and Vgs(max) of Q1 +/- 20V.  As
R1/R2 form a voltage divider I think this sets the maximum Vbat at 35V
for the current version, i.e. Q1 will pop first (as Vgs will hit 20V
when Vbat=40V).  Need higher Vce Q2 or change circuit to limit
Vgs(max). Need to make sure sufficient Vgs to switch on Q1 at low
Vbat.  Maybe two versions with different R1/R2?

4/ Current Sensor resistor values.  When building the first soldered
prototype I found that residual flux messed up the 10M R11 feedback
resistor.  Scraping flux away and cleaning with solvent brought the
resistance back up again.  This could be a problem with home
construction, and possibly humid environments.  Perhaps we should
scale resistors down to say 100k/10k voltage dividers, 1M R11?

5/ When building the first soldered prototype I found that the
position of the ground wires carrying high current caused the current
sensor to stop working (stuck at 0V).  U2 GND and the GND of R7, R9,
R10 where at different places along the GND track carrying 0.5A.  This
caused a voltage drop of about 5mV between the two GNDs.  I moved the
ground connection (made the GND in GND out points close to each other
so 0.5A was only flowing thru a short section of track) and the
current sensor started working again.  This suggests a carefully laid
out PCB is a good idea.

6/ The voltage on pins 2 & 3 of U2 (+/i op-amp input) should be within
10 mV of each other with U2 unplugged.  A greater difference indicates
one of the resistor values is wrong.

TODO List
---------

[ ] schematic
    [X] pinout of 78L05
    [X] pinout of power FET
    [X] pinout of BC548
    [ ] connect + & - together on unsued op-amp sections
    [X] TAPR open harwdare license

[X] svn repository
    + with datasheet pdfs ?
[ ] wire correctly for power on reset
    + test with dodgy power on curve (slow power up)
[ ] unused LM324 inputs
    + check if its really OK to GND them
[X] blog post
[ ] test at 5A for 24 Hrs
    + given FET on-resistance do we need a heat sink?
[X] README in SVN
    + this file
[ ] Add 4th digit to sleep timer
[ ] test with WRT54
[ ] add brown out detector to PIC reset to be double sure?
    + see PIC data sheet
[ ] check what happens in overvoltage on input, how can we protect?
[ ] document test plan
[ ] get PIC part name right in symbol file
[ ] meausure the current consumption of the soldered prototype
[ ] Indicate single point grounding on schematic
[ ] Note 1% R's on schematic
[X] make sure we can't stall in RS232 input routine
    + need a way to get around this.....
    + malformed RS323 could cause a hang
    + maybe better to just look at h/l transition or something?
    + sep pic for sleep function?
    + solution: integrate 1 sec delay with RS232 rx
[ ] Limitations
    + need to send full command before 1 second delay?
    + like send command immediately after ADC data
    + need automatic reset from fragment
    + like once every second
    + or can it be spread over cycles?
[ ] enable PIC watchdog timer
    + how can we test?
[ ] How repeatable is current sensor?
    + y intercept (DC offset)
    + slope
    + maybe build a few a check
[ ] make sure all RS232 chars OK
    + how to prog with calibrated clock?
    + check baud rate
    + is max232 OK at Vcc=5V?
[ ] programming procedure to preserve osccal
[X] make function to print decimal, rather than repeating all that code
    + we can't as call stack is only two levels deep and we are at the limit

[ ] automatic thrash tests (repeat each one for hours/days)
    + maybe use expect
    [ ] send sleep
        + make sure we sleep
    [ ] send 'w'
        + make sure we dont WD time out
    [ ] check for unlikely WD/sleep/reboot events
        + especially under nasty conditions

[ ] check how accurate the timing is
    + is 1 sec delay accurate?

[ ] work out how to run from 60V
    + 78L05 pops at 35V

[ ] Will 5V levels from PIC play nicely with 3V3 levels of router -
check data sheets!
